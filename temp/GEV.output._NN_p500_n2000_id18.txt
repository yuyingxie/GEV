
R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # TODO: Add comment
> # 
> # Author: xyy
> ###############################################################################
> library(PMA)
Loading required package: impute
> library(MASS)
> library(RSpectra)
> source("GEV.R")
> 
> args=(commandArgs(TRUE))
> 
> ##args is now a list of character vectors
> ## First check to see if arguments are passed.
> ## Then cycle through each element of the list and evaluate the expressions.
> if(length(args)==0){
+     case.id = 1  
+ }else{
+     for(i in 1:length(args)){
+         eval(parse(text=args[[i]]))
+     }
+ }
> 
> load(paste("Data/", Type, "_p", p, "_n_", n, "_id", case.id, ".Rdata", sep = ""))
> 
> Sig_est = Ome_est = matrix(0, 2 * p, 2 * p)
> 
> Ome_est[1:p, (p + 1): (2 * p)] = t(dat$X) %*% dat$Y / n
> Ome_est[ (p + 1): (2 * p), 1:p] = t(dat$Y) %*% dat$X /n
> Sig_est[1:p, 1:p] = t(dat$X) %*% dat$X /n
> Sig_est[(p + 1): (2 * p), (p + 1): (2 * p)] = t(dat$Y) %*% dat$Y / n
> 
> perm.out <- CCA.permute(x = dat$X, z = dat$Y, typex="standard", standardize = FALSE,
+         typez = "standard", nperms = 10, penaltyxs = seq(.02, .9, len = 10))

 Permutation  1  out of  10  12345678910
 Permutation  2  out of  10  12345678910
 Permutation  3  out of  10  12345678910
 Permutation  4  out of  10  12345678910
 Permutation  5  out of  10  12345678910
 Permutation  6  out of  10  12345678910
 Permutation  7  out of  10  12345678910
 Permutation  8  out of  10  12345678910
 Permutation  9  out of  10  12345678910
 Permutation  10  out of  10  12345678910
> W1 = CCA(x = dat$X, z = dat$Y,  penaltyx = perm.out$bestpenaltyx, standardize = FALSE,
+         v = perm.out$v.init, penaltyz = perm.out$bestpenaltyz, K = 2)
12345678
12345678910
> 
> U_est = Re(Get_U(Ome_est, 2))
> res = CCACV(dat$X, dat$Y, fold = 5, lambdax =seq(0.001, 0.2, length =20), 
+         lambday =seq(0.001, 0.2, length = 20), k = 2)
[2]dif=0.48967; Loss=-0.5569072
[3]dif=0.20525; Loss=-0.803223
[4]dif=0.14548; Loss=-0.8706858
[5]dif=0.10237; Loss=-0.8925947
[6]dif=0.08027; Loss=-0.9037842
[7]dif=0.07017; Loss=-0.9122405
[8]dif=0.06431; Loss=-0.9194256
[9]dif=0.06011; Loss=-0.925482
[10]dif=0.05617; Loss=-0.9304386
[11]dif=0.05191; Loss=-0.9343307
[12]dif=0.0475; Loss=-0.9373149
[13]dif=0.04308; Loss=-0.9395613
[14]dif=0.03884; Loss=-0.9412233
[15]dif=0.03485; Loss=-0.9424416
[16]dif=0.03104; Loss=-0.9433154
[17]dif=0.02755; Loss=-0.9439322
[18]dif=0.02432; Loss=-0.9443626
[19]dif=0.0213; Loss=-0.9446579
[20]dif=0.01863; Loss=-0.9448556
[21]dif=0.01618; Loss=-0.9449886
[22]dif=0.01409; Loss=-0.9450798
[23]dif=0.01233; Loss=-0.9451462
[24]dif=0.01079; Loss=-0.9451953
[25]dif=0.00943; Loss=-0.9452357
[26]dif=0.00837; Loss=-0.9452719
[27]dif=0.00751; Loss=-0.945305
[28]dif=0.00682; Loss=-0.9453362
[29]dif=0.0063; Loss=-0.9453651
[30]dif=0.00593; Loss=-0.9453915
[31]dif=0.00564; Loss=-0.9454143
[32]dif=0.00538; Loss=-0.9454357
[33]dif=0.00513; Loss=-0.9454551
[34]dif=0.00491; Loss=-0.9454727
[35]dif=0.00473; Loss=-0.9454882
[36]dif=0.00457; Loss=-0.9455018
[37]dif=0.0044; Loss=-0.9455134
[38]dif=0.00422; Loss=-0.9455232
[39]dif=0.00404; Loss=-0.9455312
[40]dif=0.00386; Loss=-0.9455373
[41]dif=0.00365; Loss=-0.9455419
[42]dif=0.00343; Loss=-0.9455454
[43]dif=0.00321; Loss=-0.9455479
[44]dif=0.00299; Loss=-0.9455497
[45]dif=0.00278; Loss=-0.9455509
[46]dif=0.00257; Loss=-0.9455519
[47]dif=0.00238; Loss=-0.9455528
[48]dif=0.00221; Loss=-0.9455538
[49]dif=0.00207; Loss=-0.945555
[50]dif=0.00196; Loss=-0.9455563
[51]dif=0.00187; Loss=-0.9455579
[52]dif=0.00179; Loss=-0.9455596
[53]dif=0.00172; Loss=-0.9455615
[54]dif=0.00167; Loss=-0.9455635
[55]dif=0.00163; Loss=-0.9455655
[56]dif=0.0016; Loss=-0.9455674
[57]dif=0.00157; Loss=-0.9455693
[58]dif=0.00154; Loss=-0.945571
[59]dif=0.0015; Loss=-0.9455726
[60]dif=0.00145; Loss=-0.9455739
[61]dif=0.00139; Loss=-0.9455751
[62]dif=0.00134; Loss=-0.945576
[63]dif=0.00128; Loss=-0.9455768
[64]dif=0.00122; Loss=-0.9455774
[65]dif=0.00117; Loss=-0.9455778
[66]dif=0.00113; Loss=-0.9455782
[67]dif=0.00108; Loss=-0.9455784
[68]dif=0.00104; Loss=-0.9455786
[69]dif=0.001; Loss=-0.9455788
[70]dif=0.00095; Loss=-0.9455789
[71]dif=0.00091; Loss=-0.9455789
[72]dif=0.00087; Loss=-0.945579
[73]dif=0.00084; Loss=-0.945579
[74]dif=0.00081; Loss=-0.9455791
[75]dif=0.00078; Loss=-0.9455791
[76]dif=0.00074; Loss=-0.9455792
[77]dif=0.00072; Loss=-0.9455793
[78]dif=0.00069; Loss=-0.9455793
[79]dif=0.00066; Loss=-0.9455794
[80]dif=0.00064; Loss=-0.9455796
[81]dif=0.00062; Loss=-0.9455797
[82]dif=6e-04; Loss=-0.9455799
[83]dif=0.00058; Loss=-0.94558
[84]dif=0.00057; Loss=-0.9455802
[85]dif=0.00056; Loss=-0.9455804
[86]dif=0.00055; Loss=-0.9455806
[87]dif=0.00054; Loss=-0.9455808
[88]dif=0.00053; Loss=-0.945581
[89]dif=0.00052; Loss=-0.9455812
[90]dif=0.00051; Loss=-0.9455814
[91]dif=5e-04; Loss=-0.9455816
[92]dif=0.00048; Loss=-0.9455817
[93]dif=0.00047; Loss=-0.9455818
[94]dif=0.00046; Loss=-0.9455819
[95]dif=0.00044; Loss=-0.945582
[96]dif=0.00043; Loss=-0.9455821
[97]dif=0.00042; Loss=-0.9455821
[98]dif=4e-04; Loss=-0.9455822
[99]dif=0.00039; Loss=-0.9455822
[100]dif=0.00037; Loss=-0.9455822
[101]dif=0.00036; Loss=-0.9455822
[102]dif=0.00035; Loss=-0.9455821
[103]dif=0.00033; Loss=-0.9455821
[104]dif=0.00032; Loss=-0.9455821
[105]dif=0.00031; Loss=-0.9455821
[106]dif=3e-04; Loss=-0.9455821
[107]dif=0.00029; Loss=-0.9455821
[108]dif=0.00028; Loss=-0.9455821
[109]dif=0.00028; Loss=-0.9455821
[110]dif=0.00027; Loss=-0.9455821
[111]dif=0.00026; Loss=-0.9455821
[112]dif=0.00026; Loss=-0.9455821
[113]dif=0.00025; Loss=-0.9455822
[114]dif=0.00025; Loss=-0.9455822
[115]dif=0.00024; Loss=-0.9455822
[116]dif=0.00024; Loss=-0.9455823
[117]dif=0.00023; Loss=-0.9455823
[118]dif=0.00022; Loss=-0.9455824
[119]dif=0.00022; Loss=-0.9455824
[120]dif=0.00021; Loss=-0.9455825
[121]dif=0.00021; Loss=-0.9455825
[122]dif=0.00021; Loss=-0.9455825
[123]dif=0.00021; Loss=-0.9455826
[124]dif=2e-04; Loss=-0.9455826
[125]dif=2e-04; Loss=-0.9455826
[126]dif=2e-04; Loss=-0.9455826
[127]dif=2e-04; Loss=-0.9455826
[128]dif=0.00019; Loss=-0.9455827
[129]dif=0.00019; Loss=-0.9455827
[130]dif=0.00018; Loss=-0.9455827
[131]dif=0.00018; Loss=-0.9455826
[132]dif=0.00017; Loss=-0.9455826
[133]dif=0.00016; Loss=-0.9455826
[134]dif=0.00016; Loss=-0.9455826
[135]dif=0.00015; Loss=-0.9455826
[136]dif=0.00014; Loss=-0.9455826
[137]dif=0.00014; Loss=-0.9455826
[138]dif=0.00013; Loss=-0.9455826
[139]dif=0.00012; Loss=-0.9455826
[140]dif=0.00012; Loss=-0.9455826
[141]dif=0.00012; Loss=-0.9455826
[142]dif=0.00011; Loss=-0.9455826
[143]dif=0.00011; Loss=-0.9455826
[144]dif=0.00011; Loss=-0.9455826
[145]dif=0.00011; Loss=-0.9455826
[146]dif=0.00011; Loss=-0.9455826
[147]dif=0.00011; Loss=-0.9455826
[148]dif=0.00011; Loss=-0.9455827
[149]dif=0.00011; Loss=-0.9455827
[150]dif=0.00011; Loss=-0.9455827
[151]dif=0.00011; Loss=-0.9455827
[152]dif=0.00011; Loss=-0.9455827
[153]dif=0.00011; Loss=-0.9455827
[154]dif=0.00011; Loss=-0.9455827
[155]dif=1e-04; Loss=-0.9455827
[156]dif=1e-04; Loss=-0.9455827
[157]dif=1e-04; Loss=-0.9455828
[158]dif=1e-04; Loss=-0.9455828
[159]dif=1e-04; Loss=-0.9455828
[160]dif=9e-05; Loss=-0.9455828
[161]dif=9e-05; Loss=-0.9455828
[162]dif=9e-05; Loss=-0.9455827
[163]dif=8e-05; Loss=-0.9455827
[164]dif=8e-05; Loss=-0.9455827
[165]dif=8e-05; Loss=-0.9455827
[166]dif=8e-05; Loss=-0.9455827
[167]dif=7e-05; Loss=-0.9455827
[168]dif=7e-05; Loss=-0.9455827
[169]dif=7e-05; Loss=-0.9455827
[170]dif=7e-05; Loss=-0.9455827
[171]dif=7e-05; Loss=-0.9455827
[172]dif=6e-05; Loss=-0.9455827
[173]dif=6e-05; Loss=-0.9455827
[174]dif=6e-05; Loss=-0.9455827
[175]dif=6e-05; Loss=-0.9455827
[176]dif=6e-05; Loss=-0.9455827
[177]dif=6e-05; Loss=-0.9455827
[178]dif=6e-05; Loss=-0.9455827
[179]dif=6e-05; Loss=-0.9455828
[180]dif=6e-05; Loss=-0.9455828
[181]dif=6e-05; Loss=-0.9455828
[182]dif=6e-05; Loss=-0.9455828
[183]dif=6e-05; Loss=-0.9455828
[184]dif=6e-05; Loss=-0.9455828
[185]dif=6e-05; Loss=-0.9455828
[186]dif=6e-05; Loss=-0.9455828
[187]dif=6e-05; Loss=-0.9455828
[188]dif=6e-05; Loss=-0.9455828
[189]dif=6e-05; Loss=-0.9455828
[190]dif=5e-05; Loss=-0.9455828
[191]dif=5e-05; Loss=-0.9455828
[192]dif=5e-05; Loss=-0.9455828
[193]dif=5e-05; Loss=-0.9455828
[194]dif=5e-05; Loss=-0.9455828
[195]dif=4e-05; Loss=-0.9455828
[196]dif=4e-05; Loss=-0.9455828
[197]dif=4e-05; Loss=-0.9455828
[198]dif=4e-05; Loss=-0.9455828
[199]dif=4e-05; Loss=-0.9455828
[200]dif=4e-05; Loss=-0.9455828
[201]dif=3e-05; Loss=-0.9455828
[202]dif=3e-05; Loss=-0.9455828
[203]dif=3e-05; Loss=-0.9455828
[204]dif=3e-05; Loss=-0.9455828
[205]dif=3e-05; Loss=-0.9455828
[206]dif=3e-05; Loss=-0.9455828
[207]dif=3e-05; Loss=-0.9455828
[208]dif=3e-05; Loss=-0.9455828
[209]dif=3e-05; Loss=-0.9455828
[210]dif=4e-05; Loss=-0.9455828
[211]dif=4e-05; Loss=-0.9455828
[212]dif=4e-05; Loss=-0.9455828
[213]dif=4e-05; Loss=-0.9455828
[214]dif=4e-05; Loss=-0.9455828
[215]dif=4e-05; Loss=-0.9455828
[216]dif=4e-05; Loss=-0.9455828
[217]dif=4e-05; Loss=-0.9455828
[218]dif=4e-05; Loss=-0.9455828
[219]dif=3e-05; Loss=-0.9455828
[220]dif=3e-05; Loss=-0.9455828
[221]dif=3e-05; Loss=-0.9455828
[222]dif=3e-05; Loss=-0.9455828
[223]dif=3e-05; Loss=-0.9455828
[224]dif=3e-05; Loss=-0.9455828
[225]dif=3e-05; Loss=-0.9455828
[226]dif=2e-05; Loss=-0.9455828
[227]dif=2e-05; Loss=-0.9455828
[228]dif=2e-05; Loss=-0.9455828
[229]dif=2e-05; Loss=-0.9455828
[230]dif=2e-05; Loss=-0.9455828
[231]dif=2e-05; Loss=-0.9455828
[232]dif=2e-05; Loss=-0.9455828
[233]dif=2e-05; Loss=-0.9455828
[234]dif=2e-05; Loss=-0.9455828
[235]dif=2e-05; Loss=-0.9455828
[236]dif=2e-05; Loss=-0.9455828
[237]dif=2e-05; Loss=-0.9455828
[238]dif=2e-05; Loss=-0.9455828
[239]dif=2e-05; Loss=-0.9455828
[240]dif=2e-05; Loss=-0.9455828
[241]dif=2e-05; Loss=-0.9455828
[242]dif=2e-05; Loss=-0.9455828
[243]dif=2e-05; Loss=-0.9455828
[244]dif=2e-05; Loss=-0.9455828
[245]dif=2e-05; Loss=-0.9455828
[246]dif=2e-05; Loss=-0.9455828
[247]dif=2e-05; Loss=-0.9455828
[248]dif=2e-05; Loss=-0.9455828
[249]dif=2e-05; Loss=-0.9455828
[250]dif=2e-05; Loss=-0.9455828
[251]dif=2e-05; Loss=-0.9455828
[252]dif=2e-05; Loss=-0.9455828
[253]dif=2e-05; Loss=-0.9455828
[254]dif=2e-05; Loss=-0.9455828
[255]dif=2e-05; Loss=-0.9455828
[256]dif=2e-05; Loss=-0.9455828
[257]dif=2e-05; Loss=-0.9455828
[258]dif=1e-05; Loss=-0.9455828
[259]dif=2e-05; Loss=-0.9455828
[260]dif=2e-05; Loss=-0.9455828
[261]dif=2e-05; Loss=-0.9455828
[262]dif=2e-05; Loss=-0.9455828
[263]dif=2e-05; Loss=-0.9455828
[264]dif=2e-05; Loss=-0.9455828
[265]dif=2e-05; Loss=-0.9455828
[266]dif=1e-05; Loss=-0.9455828
[267]dif=1e-05; Loss=-0.9455828
[268]dif=1e-05; Loss=-0.9455828
[269]dif=1e-05; Loss=-0.9455828
[270]dif=1e-05; Loss=-0.9455828
[271]dif=1e-05; Loss=-0.9455828
[272]dif=1e-05; Loss=-0.9455828
[273]dif=1e-05; Loss=-0.9455828
[274]dif=1e-05; Loss=-0.9455828
[275]dif=1e-05; Loss=-0.9455828
[276]dif=1e-05; Loss=-0.9455828
[277]dif=1e-05; Loss=-0.9455828
[278]dif=1e-05; Loss=-0.9455828
[279]dif=1e-05; Loss=-0.9455828
[280]dif=1e-05; Loss=-0.9455828
[281]dif=1e-05; Loss=-0.9455828
[282]dif=1e-05; Loss=-0.9455828
[283]dif=1e-05; Loss=-0.9455828
[284]dif=1e-05; Loss=-0.9455828
[285]dif=1e-05; Loss=-0.9455828
[286]dif=1e-05; Loss=-0.9455828
[287]dif=1e-05; Loss=-0.9455828
[288]dif=1e-05; Loss=-0.9455828
[289]dif=1e-05; Loss=-0.9455828
[290]dif=1e-05; Loss=-0.9455828
[291]dif=1e-05; Loss=-0.9455828
[292]dif=1e-05; Loss=-0.9455828
[293]dif=1e-05; Loss=-0.9455828
[294]dif=1e-05; Loss=-0.9455828
[295]dif=1e-05; Loss=-0.9455828
[296]dif=1e-05; Loss=-0.9455828
[297]dif=1e-05; Loss=-0.9455828
[298]dif=1e-05; Loss=-0.9455828
[299]dif=1e-05; Loss=-0.9455828
[300]dif=1e-05; Loss=-0.9455828
[301]dif=1e-05; Loss=-0.9455828
[302]dif=1e-05; Loss=-0.9455828
[303]dif=1e-05; Loss=-0.9455828
[304]dif=1e-05; Loss=-0.9455828
[305]dif=1e-05; Loss=-0.9455828
[306]dif=1e-05; Loss=-0.9455828
[307]dif=1e-05; Loss=-0.9455828
[308]dif=1e-05; Loss=-0.9455828
[309]dif=1e-05; Loss=-0.9455828
[310]dif=1e-05; Loss=-0.9455828
[311]dif=1e-05; Loss=-0.9455828
[312]dif=1e-05; Loss=-0.9455828
[313]dif=1e-05; Loss=-0.9455828
[314]dif=1e-05; Loss=-0.9455828
[315]dif=1e-05; Loss=-0.9455828
[316]dif=1e-05; Loss=-0.9455828
[317]dif=1e-05; Loss=-0.9455828
[318]dif=1e-05; Loss=-0.9455828
[319]dif=1e-05; Loss=-0.9455828
[320]dif=1e-05; Loss=-0.9455828
[321]dif=1e-05; Loss=-0.9455828
[322]dif=1e-05; Loss=-0.9455828
[323]dif=1e-05; Loss=-0.9455828
[324]dif=1e-05; Loss=-0.9455828
[325]dif=1e-05; Loss=-0.9455828
[326]dif=1e-05; Loss=-0.9455828
[327]dif=1e-05; Loss=-0.9455828
[328]dif=1e-05; Loss=-0.9455828
[329]dif=1e-05; Loss=-0.9455828
[330]dif=1e-05; Loss=-0.9455828
[331]dif=1e-05; Loss=-0.9455828
[332]dif=1e-05; Loss=-0.9455828
[333]dif=1e-05; Loss=-0.9455828
[334]dif=1e-05; Loss=-0.9455828
[335]dif=1e-05; Loss=-0.9455828
[336]dif=1e-05; Loss=-0.9455828
[337]dif=1e-05; Loss=-0.9455828
[338]dif=1e-05; Loss=-0.9455828
[339]dif=1e-05; Loss=-0.9455828
[340]dif=1e-05; Loss=-0.9455828
[341]dif=1e-05; Loss=-0.9455828
[342]dif=1e-05; Loss=-0.9455828
[343]dif=1e-05; Loss=-0.9455828
[344]dif=0; Loss=-0.9455828
[345]dif=0; Loss=-0.9455828
[346]dif=0; Loss=-0.9455828
[347]dif=0; Loss=-0.9455828
[348]dif=0; Loss=-0.9455828
[349]dif=0; Loss=-0.9455828
[350]dif=0; Loss=-0.9455828
[351]dif=0; Loss=-0.9455828
[352]dif=0; Loss=-0.9455828
[353]dif=0; Loss=-0.9455828
[354]dif=0; Loss=-0.9455828
[355]dif=0; Loss=-0.9455828
[356]dif=0; Loss=-0.9455828
[357]dif=0; Loss=-0.9455828
[358]dif=0; Loss=-0.9455828
[359]dif=0; Loss=-0.9455828
[360]dif=0; Loss=-0.9455828
[361]dif=0; Loss=-0.9455828
[362]dif=0; Loss=-0.9455828
[363]dif=0; Loss=-0.9455828
[364]dif=0; Loss=-0.9455828
[365]dif=0; Loss=-0.9455828
[366]dif=0; Loss=-0.9455828
[367]dif=0; Loss=-0.9455828
[368]dif=0; Loss=-0.9455828
[369]dif=0; Loss=-0.9455828
[370]dif=0; Loss=-0.9455828
[371]dif=0; Loss=-0.9455828
[372]dif=0; Loss=-0.9455828
[373]dif=0; Loss=-0.9455828
[374]dif=0; Loss=-0.9455828
[375]dif=0; Loss=-0.9455828
[376]dif=0; Loss=-0.9455828
[377]dif=0; Loss=-0.9455828
[378]dif=0; Loss=-0.9455828
[379]dif=0; Loss=-0.9455828
[380]dif=0; Loss=-0.9455828
[381]dif=0; Loss=-0.9455828
[382]dif=0; Loss=-0.9455828
[383]dif=0; Loss=-0.9455828
[384]dif=0; Loss=-0.9455828
[385]dif=0; Loss=-0.9455828
[386]dif=0; Loss=-0.9455828
[387]dif=0; Loss=-0.9455828
[388]dif=0; Loss=-0.9455828
[389]dif=0; Loss=-0.9455828
[390]dif=0; Loss=-0.9455828
[391]dif=0; Loss=-0.9455828
[392]dif=0; Loss=-0.9455828
[393]dif=0; Loss=-0.9455828
[394]dif=0; Loss=-0.9455828
[395]dif=0; Loss=-0.9455828
[396]dif=0; Loss=-0.9455828
[397]dif=0; Loss=-0.9455828
[398]dif=0; Loss=-0.9455828
[399]dif=0; Loss=-0.9455828
[400]dif=0; Loss=-0.9455828
[401]dif=0; Loss=-0.9455828
[402]dif=0; Loss=-0.9455828
[403]dif=0; Loss=-0.9455828
[404]dif=0; Loss=-0.9455828
[405]dif=0; Loss=-0.9455828
[406]dif=0; Loss=-0.9455828
[407]dif=0; Loss=-0.9455828
[408]dif=0; Loss=-0.9455828
[409]dif=0; Loss=-0.9455828
[410]dif=0; Loss=-0.9455828
[411]dif=0; Loss=-0.9455828
[412]dif=0; Loss=-0.9455828
[413]dif=0; Loss=-0.9455828
[414]dif=0; Loss=-0.9455828
[415]dif=0; Loss=-0.9455828
[416]dif=0; Loss=-0.9455828
[417]dif=0; Loss=-0.9455828
[418]dif=0; Loss=-0.9455828
[419]dif=0; Loss=-0.9455828
[420]dif=0; Loss=-0.9455828
[421]dif=0; Loss=-0.9455828
[422]dif=0; Loss=-0.9455828
[423]dif=0; Loss=-0.9455828
[424]dif=0; Loss=-0.9455828
[425]dif=0; Loss=-0.9455828
[426]dif=0; Loss=-0.9455828
[427]dif=0; Loss=-0.9455828
[428]dif=0; Loss=-0.9455828
12
[fold=1]i=1j=1
